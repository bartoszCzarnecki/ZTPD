-- zadanie 1

CREATE TABLE CYTATY AS SELECT * FROM ZSBD_TOOLS.cytaty;

-- zadanie 2

SELECT AUTOR, TEKST FROM CYTATY
WHERE LOWER(TEKST) LIKE '%pesymista%' AND LOWER(tekst) LIKE '%optymista%';

-- zadanie 3

CREATE INDEX CYTATY_TEKST_INDEX ON CYTATY(TEKST)
INDEXTYPE IS CTXSYS.CONTEXT;

-- zadanie 4

SELECT AUTOR, TEKST  FROM CYTATY
WHERE CONTAINS(TEKST 'pesymista AND optymista', 1) > 0;

-- zadanie 5
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST 'pesymista ~ optymista', 1) > 0;

-- zadanie 6
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST 'NEAR((pesymista, optymista), 3)', 1) > 0;

-- zadanie 7
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST 'NEAR((pesymista, optymista), 10)', 1) > 0;

-- zadanie 8
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST 'życi%', 1) > 0;

-- zadanie 9
SELECT AUTOR, TEKST, SCORE(1) AS DOPASOWANIE FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0;

-- zadanie 10
SELECT AUTOR, TEKST, SCORE(1) AS DOPASOWANIE FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0 AND ROWNUM <= 1
ORDER BY 3 DESC;

-- zadanie 11
SELECT AUTOR, TEKST  FROM CYTATY
WHERE CONTAINS(TEKST, 'FUZZY(PROBLEM)', 1) > 0;

-- zadanie 12
INSERT INTO CYTATY VALUES(
    1000, 
    'Bertrand Russell',
    'To smutne, że głupcy są tacy pewni siebie, a ludzie rozsądni tacy pełni wątpliwości.'
);
COMMIT;

-- zadanie 13
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST, 'głupcy', 1) > 0;

-- zadanie 14
SELECT TOKEN_TEXT FROM DR$CYTATY_TEKST_IDX$I
WHERE TOKEN_TEXT = 'głupcy';

-- zadanie 15
DROP INDEX CYTATY_TEKST_IDX;
CREATE INDEX CYTATY_TEKST_IDX ON CYTATY(TEKST) INDEXTYPE IS CTXSYS.CONTEXT;

-- zadanie 16
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST, 'głupcy', 1) > 0;

-- zadanie 17
DROP INDEX CYTATY_TEKST_IDX;
DROP TABLE CYTATY;

---------------------------------------

-- zadanie 1
CREATE TABLE QUOTES AS SELECT * FROM ZSBD_TOOLS.QUOTES;

-- zadanie 2
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT) INDEXTYPE IS CTXSYS.CONTEXT;

-- zadanie 3
SELECT AUTOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'work', 1) > 0;

SELECT AUTOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, '$work', 1) > 0;

SELECT AUTOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'working', 1) > 0;

SELECT AUTOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, '$working', 1) > 0;

-- zadanie 4
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'it', 1) > 0;

-- zadanie 5
SELECT * FROM CTX_STOPLISTS;

-- zadanie 6
SELECT * FROM CTX_STOPWORDS;

-- zadanie 7
DROP INDEX QUOTES_TEXT_IDX;
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT) INDEXTYPE IS CTXSYS.CONTEXT PATAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST');

-- zadanie 8
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'it', 1) > 0;
-- tak

-- zadanie 9
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'fool or humans', 1) > 0;

-- zadanie 10
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'fool or computer', 1) > 0;

-- zadanie 11
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, '(fool and computer) within sentence', 1) > 0;

-- zadanie 12
DROP INDEX QUOTES_TEXT_IDX;

-- zadanie 13
BEGIN
CTX_DLL.CREATE_SECTION_GROUP('nullgroup', 'NULL_SECTION_GROUP');
CTX_DLL.CREATE_SECTION_GROUP('nullgroup', 'SENTENCE');
CTX_DLL.CREATE_SECTION_GROUP('nullgroup', 'PARAGRAPH');
END;

-- zadanie 14
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST section group nullgroup');

-- zadanie 15
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, '(fool and humans) within sentence', 1) > 0;

-- zadanie 16
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, '(fool and computer) within sentence', 1) > 0;

-- zadanie 17
DROP INDEX QUOTES_TEXT_IDX;
BEGIN
CTX_DLL.CREATE_PREFERENCE('lex_z_m', 'BASIC_LEXER');
CTX_DLL.SET_ATTRIBUTE('lex_z_m', 'printjoints', '_-');
CTX_DLL.SET_ATTRIBUTE('lex_z_m', 'index_text', 'YES');
END;
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT PARAMETERS('stoplist CTXSYS.EMPTY_STOPLIST section group nullgroup LEXER lex_z_m');

-- zadanie 18
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'humans', 1) > 0;
-- nie

-- zadanie 19
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'non\-humans', 1) > 0;

-- zadanie 20
DROP TABLE QUOTES